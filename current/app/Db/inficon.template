##  Inficon MPH DataDEV
#
##  DEV
##       EPICS prefix
##  PORT
##       ASYN PORT_NAME
##
##

record(mbbo, "$(DEV):INFICON_STATE")
{
    field(PINI, "YES")
    field(DESC, "Current state")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(ZRST, "IDLE")
    field(ONST, "MONITORING")
    field(TWST, "READ_IN_CYCLES")
    field(THST, "LEAKCHEK")
	field(VAL,  "0")
}

record(bi, "$(DEV):START_MONITORING")
{
    field(DESC, "Start monitoring")
	field(FLNK, "$(DEV):SET_MONITOR_STATE")
}

record(bi, "$(DEV):START_CYCLE_READ")
{
    field(DESC, "Start cycle read")
	field(FLNK, "$(DEV):SET_READ_STATE")
}

record(bi, "$(DEV):START_LEAKCHECK")
{
    field(DESC, "Start leakcheck")
	field(FLNK, "$(DEV):SET_LEAKCHK_STATE")
}

record(bi, "$(DEV):STOP_SCAN")
{
    field(DESC, "Stop scanning")
	field(FLNK, "$(DEV):SET_STOP_SCAN")
}

record(longout, "$(DEV):SET_MONITOR_STATE")
{
    field(DESC, "Set monitoring state")
    field(OUT,  "$(DEV):INFICON_STATE.VAL PP")
	field(VAL,  "1")
}

record(longout, "$(DEV):SET_READ_STATE")
{
    field(DESC, "Set read in cylcles state")
    field(OUT,  "$(DEV):INFICON_STATE.VAL PP")
	field(VAL,  "2")
}

record(longout, "$(DEV):SET_LEAKCHK_STATE")
{
    field(DESC, "Set leakcheck state")
    field(OUT,  "$(DEV):INFICON_STATE.VAL PP")
	field(VAL,  "3")
}

record(longout, "$(DEV):SET_IDLE_STATE")
{
    field(DESC, "Set Idle state")
    field(OUT,  "$(DEV):INFICON_STATE.VAL PP")
	field(VAL,  "0")
}

## SCAN STOP IMMEDIATELLY
record(bo, "$(DEV):SET_STOP_SCAN")
{
    field(DESC, "Stop scanning command")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask($(PORT),0,0x1)SCAN_STOP")
    field(ZNAM, "IMMEDIATELLY")
    field(ONAM, "END_OF_SCAN")
	field(FLNK, "$(DEV):SET_IDLE_STATE")
	field(VAL,  "0")
}

## SCAN START
record(bo, "$(DEV):SET_START_SCAN")
{
    field(DESC, "Start scan command")
    field(DTYP, "asynUInt32Digital")
    field(OUT,  "@asynMask($(PORT),0,0x1)SCAN_STOP")
    field(ZNAM, "START_SCAN")
    field(ONAM, "START_SCAN")
	field(VAL,  "1")
}


## EMI ON/OFF


## EM ON/OFF


## RF GEN ON/OFF


## SHUTDOWN


## Pulling data PVs 
record(stringin, "$(DEV):GET_COMM_PARAM")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))GET_COMM_PARAM")
    field(SCAN, "$(CSCAN) second")
}

record(stringin, "$(DEV):GET_SENS_INFO")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))GET_SENS_INFO")
    field(SCAN, "$(CSCAN) second")
}

record(stringin, "$(DEV):GET_DEV_STATUS")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))GET_DEV_STAT")
    field(SCAN, "$(CSCAN) second")
}

record(stringin, "$(DEV):GET_CH1_SCAN_SETUP")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),1)GET_CH_SCAN_SETUP")
    field(SCAN, "$(CSCAN) second")
}

record(stringin, "$(DEV):GET_CH4_SCAN_SETUP")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),4)GET_CH_SCAN_SETUP")
    field(SCAN, "$(CSCAN) second")
}

record(stringin, "$(DEV):GET_DIAG_DATA")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))GET_DIAG_DATA")
    field(SCAN, "$(CSCAN) second")
}

record(stringin, "$(DEV):GET_SCAN_INFO")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))GET_SCAN_INFO")
    field(SCAN, "$(CSCAN) second")
}

record(stringin, "$(DEV):GET_SENS_DETECT")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))GET_SENS_DETECT")
    field(SCAN, "$(CSCAN) second")
}

record(stringin, "$(DEV):GET_SENS_FILT")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))GET_SENS_FILT")
    field(SCAN, "$(CSCAN) second")
}

record(ai, "$(DEV):TOTAL_PRESS_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT))GET_PRESS")
    field(SCAN, "$(DSCAN) second")
}

record(waveform,"$(DEV):MONITORING_SCAN")
{
    field(DTYP, "asynFloat32ArrayIn")
    field(INP,  "@asyn($(PORT))GET_SCAN")
    field(SCAN, "$(CSCAN) second")
    field(FTVL, "FLOAT")
    field(NELM, "16384")
    field(PREC, "4")
}

record(waveform,"$(DEV):CYCLE_SCAN")
{
    field(DTYP, "asynFloat32ArrayIn")
    field(INP,  "@asyn($(PORT))GET_SCAN")
    field(FTVL, "FLOAT")
    field(NELM, "16384")
    field(PREC, "4")
}

record(waveform,"$(DEV):LEAKCHECK_SCAN")
{
    field(DTYP, "asynFloat32ArrayIn")
    field(INP,  "@asyn($(PORT))GET_SCAN")
    field(FTVL, "FLOAT")
    field(NELM, "16384")
    field(PREC, "4")
}

record(stringout, "$(DEV):CH1_MODE")
{
    field(DESC, "Ch1 measurement mode")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(PORT),1)CH_MODE")
	field(VAL,  "Sweep")
}

record(stringout, "$(DEV):CH4_MODE")
{
    field(DESC, "Ch4 measurement mode")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn($(PORT),4)CH_MODE")
	field(VAL,  "Single")
}

record(stringin, "$(DEV):IP")
{
    field(DESC, "IP address")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))IP")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(DEV):MAC")
{
    field(DESC, "MAC address")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))MAC")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(DEV):SENS_NAME")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))SENS_NAME")
    field(SCAN, "I/O Intr")
}

record(stringin,"$(DEV):SENS_DESC")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))SENS_DESC")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):SENS_SN")
{
    field(DESC, "Sensor SN")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)SENS_SN")
    field(SCAN, "I/O Intr")
}

record(mbbiDirect, "$(DEV):SYST_STAT_RBV")
{
    field(DESC, "Get system status")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)SYST_STAT")
    field(SCAN, "I/O Intr")
}

record(mbbiDirect, "$(DEV):HW_ERR_RBV")
{
    field(DESC, "Get hw errors")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)HW_ERROR")
    field(SCAN, "I/O Intr")
}

record(mbbiDirect, "$(DEV):HW_WARN_RBV")
{
    field(DESC, "Get system status")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)HW_WARN")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):PWR_ON_TIME_RBV")
{
    field(DESC, "Pwr on time")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)PWR_ON_T")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):EMI_ON_TIME_RBV")
{
    field(DESC, "Emi on time")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EMI_ON_T")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):EM_ON_TIME_RBV")
{
    field(DESC, "Em on time")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EM_ON_T")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):EM_CML_ON_TIME_RBV")
{
    field(DESC, "Em cumulative on time")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EM_CML_ON_T")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):EM_PRESS_TRIP_RBV")
{
    field(DESC, "Em press. trip counter")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EM_PRESS_TRIP")
    field(SCAN, "I/O Intr")
}

record(ai, "$(DEV):DEVICE_TEMP_RBV")
{
    field(DESC, "Device internal Temp.")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT))BOX_TEMP")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
    field(EGU,  "C")
}

record(longin, "$(DEV):ANODE_POT_RBV")
{
    field(DESC, "Ion Source Anode Potential")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)ANODE_POTENTIAL")
    field(SCAN, "I/O Intr")
    field(EGU,  "cV")
}

record(longin, "$(DEV):EMI_CURR_RBV")
{
    field(DESC, "Ion Source Emi Current")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EMI_CURRENT")
    field(SCAN, "I/O Intr")
    field(EGU,  "uA")
}

record(longin, "$(DEV):FOCUS_POT_RBV")
{
    field(DESC, "Ion Source Focus Potential")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)FOCUS_POTENTIAL")
    field(SCAN, "I/O Intr")
    field(EGU,  "cV")
}

record(longin, "$(DEV):ELECT_ENG_RBV")
{
    field(DESC, "Ion Source Electron Energy")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)ELECT_ENERGY")
    field(SCAN, "I/O Intr")
    field(EGU,  "cV")
}

record(longin, "$(DEV):FIL_POT_RBV")
{
    field(DESC, "Ion Source Filamet Potential")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)FIL_POTENTIAL")
    field(SCAN, "I/O Intr")
    field(EGU,  "mV")
}

record(longin, "$(DEV):FIL_CURR_RBV")
{
    field(DESC, "Ion Source Filamet Current")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)FIL_CURRENT")
    field(SCAN, "I/O Intr")
    field(EGU,  "mA")
}

record(longin, "$(DEV):EM_POT_RBV")
{
    field(DESC, "Sens. Detect. EM Potential")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EM_POTENTIAL")
    field(SCAN, "I/O Intr")
    field(EGU,  "mA")
}

record(longin, "$(DEV):FIRST_SCAN")
{
    field(DESC, "First scan number")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)FIRST_SCAN")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):LAST_SCAN")
{
    field(DESC, "Last complete scan number")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)LAST_SCAN")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):CURRENT_SCAN")
{
    field(DESC, "Current scan number")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)CURRENT_SCAN")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):PPSCAN")
{
    field(DESC, "Points per scan number")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)PPSCAN")
    field(SCAN, "I/O Intr")
}

record(bi, "$(DEV):SCAN_STAT")
{
    field(DESC, "Scan running status")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0x1)SCAN_STAT")
    field(ZNAM, "STOP")
    field(ONAM, "RUNNING")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):EM_V_RBV")
{
    field(DESC, "Elect. Multiplier Voltage")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EM_V")
    field(SCAN, "I/O Intr")
    field(EGU,  "V")
}

record(longin, "$(DEV):EM_V_MAX_RBV")
{
    field(DESC, "EM Max Voltage")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EM_V_MAX")
    field(SCAN, "I/O Intr")
    field(EGU,  "V")
}

record(longin, "$(DEV):EM_V_MIN_RBV")
{
    field(DESC, "EM Min Voltage")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EM_V_MIN")
    field(SCAN, "I/O Intr")
    field(EGU,  "V")
}

record(ai, "$(DEV):EM_GAIN_RBV")
{
    field(DESC, "EM Gain")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT))EM_GAIN")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
}

record(longin, "$(DEV):EM_GAIN_MASS_RBV")
{
    field(DESC, "EM Gain Mass")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)EM_GAIN_MASS")
    field(SCAN, "I/O Intr")
    field(EGU,  "cAMU")
}

record(ai, "$(DEV):MASS_MAX_RBV")
{
    field(DESC, "Max mass")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT))MASS_MAX")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
    field(EGU,  "AMU")
}

record(ai, "$(DEV):MASS_MIN_RBV")
{
    field(DESC, "Min mass")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT))MASS_MIN")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
    field(EGU,  "AMU")
}

record(longin, "$(DEV):DWELL_MAX_RBV")
{
    field(DESC, "Max Dwell supported")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)DWELL_MAX")
    field(SCAN, "I/O Intr")
}

record(longin, "$(DEV):DWELL_MIN_RBV")
{
    field(DESC, "Min Dwell supported")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),0,0xFFFFFFFF)DWELL_MIN")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(DEV):CH1_MODE_RBV")
{
    field(DESC, "Ch1 mode")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),1)CH_MODE")
    field(SCAN, "I/O Intr")
}

record(mbbi, "$(DEV):CH1_DWELL_RBV")
{
    field(DESC, "CH1 dwell")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),1,0xFFFFFFFF)CH_DWELL")
    field(SCAN, "I/O Intr")
    field(ZRVL, "1")
    field(ONVL, "2")
    field(TWVL, "4")
    field(THVL, "8")
    field(FRVL, "16")
    field(FVVL, "32")
    field(SXVL, "48")
    field(SVVL, "64")
    field(EIVL, "128")
    field(NIVL, "256")
    field(TEVL, "512")
    field(ELVL, "1024")
    field(TVVL, "2048")
    field(TTVL, "4096")
    field(FTVL, "8192")
    field(FFVL, "16384")
    field(ZRST, "1")
    field(ONST, "2")
    field(TWST, "4")
    field(THST, "8")
    field(FRST, "16")
    field(FVST, "32")
    field(SXST, "48")
    field(SVST, "64")
    field(EIST, "128")
    field(NIST, "256")
    field(TEST, "512")
    field(ELST, "1024")
    field(TVST, "2048")
    field(TTST, "4096")
    field(FTST, "8192")
    field(FFST, "16384")
}

record(mbbi, "$(DEV):CH1_PPAMU_RBV")
{
    field(DESC, "CH1 Points Per AMU")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),1,0xFFFFFFFF)CH_PPAMU")
    field(SCAN, "I/O Intr")
    field(ZRVL, "1")
    field(ONVL, "2")
    field(TWVL, "4")
    field(THVL, "5")
    field(FRVL, "10")
    field(FVVL, "20")
    field(SXVL, "25")
    field(SVVL, "50")
    field(EIVL, "100")
    field(ZRST, "1")
    field(ONST, "2")
    field(TWST, "4")
    field(THST, "5")
    field(FRST, "10")
    field(FVST, "20")
    field(SXST, "25")
    field(SVST, "50")
    field(EIST, "100")
}

record(ai, "$(DEV):CH1_START_MASS_RBV")
{
    field(DESC, "CH1 start mass")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),1)CH_START_MASS")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
    field(EGU,  "AMU")
}

record(ai, "$(DEV):CH1_STOP_MASS_RBV")
{
    field(DESC, "CH1 start mass")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),1)CH_STOP_MASS")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
    field(EGU,  "AMU")
}

record(stringin, "$(DEV):CH4_MODE_RBV")
{
    field(DESC, "Ch4 mode")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),4)CH_MODE")
    field(SCAN, "I/O Intr")
}

record(mbbi, "$(DEV):CH4_DWELL_RBV")
{
    field(DESC, "CH1 dwell")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),4,0xFFFFFFFF)CH_DWELL")
    field(SCAN, "I/O Intr")
    field(ZRVL, "1")
    field(ONVL, "2")
    field(TWVL, "4")
    field(THVL, "8")
    field(FRVL, "16")
    field(FVVL, "32")
    field(SXVL, "48")
    field(SVVL, "64")
    field(EIVL, "128")
    field(NIVL, "256")
    field(TEVL, "512")
    field(ELVL, "1024")
    field(TVVL, "2048")
    field(TTVL, "4096")
    field(FTVL, "8192")
    field(FFVL, "16384")
    field(ZRST, "1")
    field(ONST, "2")
    field(TWST, "4")
    field(THST, "8")
    field(FRST, "16")
    field(FVST, "32")
    field(SXST, "48")
    field(SVST, "64")
    field(EIST, "128")
    field(NIST, "256")
    field(TEST, "512")
    field(ELST, "1024")
    field(TVST, "2048")
    field(TTST, "4096")
    field(FTST, "8192")
    field(FFST, "16384")
}

record(mbbi, "$(DEV):CH4_PPAMU_RBV")
{
    field(DESC, "CH1 Points Per AMU")
    field(DTYP, "asynUInt32Digital")
    field(INP,  "@asynMask($(PORT),4,0xFFFFFFFF)CH_PPAMU")
    field(SCAN, "I/O Intr")
    field(ZRVL, "1")
    field(ONVL, "2")
    field(TWVL, "4")
    field(THVL, "5")
    field(FRVL, "10")
    field(FVVL, "20")
    field(SXVL, "25")
    field(SVVL, "50")
    field(EIVL, "100")
    field(ZRST, "1")
    field(ONST, "2")
    field(TWST, "4")
    field(THST, "5")
    field(FRST, "10")
    field(FVST, "20")
    field(SXST, "25")
    field(SVST, "50")
    field(EIST, "100")
}

record(ai, "$(DEV):CH4_START_MASS_RBV")
{
    field(DESC, "CH1 start mass")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),4)CH_START_MASS")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
    field(EGU,  "AMU")
}

record(ai, "$(DEV):CH4_STOP_MASS_RBV")
{
    field(DESC, "CH1 start mass")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),4)CH_STOP_MASS")
    field(SCAN, "I/O Intr")
    field(PREC, "2")
    field(EGU,  "AMU")
}










